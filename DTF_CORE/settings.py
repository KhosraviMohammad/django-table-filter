"""
Django settings for DTF_CORE project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from django.db import models
from django_filters import filters
from django import forms

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@!$eviuy!htu*$k0v@vb_ot=(lcv6y3xpx4%0aga2huzp!-!nt'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # project requirements
    'django_tables2',
    'django_filters',
    # project apps
    'django_table_filters.table_filters.apps.TableFiltersConfig',
    'example',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DTF_CORE.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DTF_CORE.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


def generate_column_filter(*, column, table, model, split_column_names, name_and_fields, fields_and_models):
    from django_table_filters.table_filters.column_filters import ColumnFilter
    last_field_name = split_column_names[len(split_column_names) - 1]
    last_field = name_and_fields[last_field_name]
    filter_accessor = column.accessor
    column_filter = ColumnFilter()
    if last_field.choices is not None:
        column_filter = ColumnFilter({filter_accessor: filters.ChoiceFilter(choices=last_field.choices, widget=forms.TextInput(attrs={'class': 'form-control input-filter'}))})
    elif isinstance(last_field, models.ManyToManyField):
        last_model = fields_and_models[last_field]
        column_filter = ColumnFilter({filter_accessor: filters.ModelMultipleChoiceFilter(queryset=last_model.objects.all(), widget=forms.SelectMultiple(attrs={'class': 'form-control input-filter'}))})
    elif isinstance(last_field, models.ForeignKey):
        last_model = fields_and_models[last_field]
        column_filter = ColumnFilter({filter_accessor: filters.ModelChoiceFilter(queryset=last_model.objects.all(), widget=forms.Select(attrs={'class': 'form-control input-filter'}))})
    elif isinstance(last_field, models.CharField):
        column_filter = ColumnFilter({filter_accessor: filters.CharFilter(lookup_expr='icontains', widget=forms.TextInput(attrs={'class': 'form-control input-filter'}))})
    elif isinstance(last_field, models.DateTimeField):
        filter_from = filters.DateTimeFilter(field_name=filter_accessor, lookup_expr='gte', widget=forms.DateTimeInput(attrs={'class': 'form-control input-filter', 'placeholder': 'from'}))
        filter_to = filters.DateTimeFilter(field_name=filter_accessor, lookup_expr='lte', widget=forms.DateTimeInput(attrs={'class': 'form-control input-filter', 'placeholder': 'to'}))
        column_filter = ColumnFilter({'date_from': filter_from, 'data_to': filter_to})
    elif isinstance(last_field, models.DecimalField):
        filter_from = filters.NumberFilter(field_name=filter_accessor, lookup_expr='gte', widget=forms.NumberInput(attrs={'class': 'form-control input-filter', 'placeholder': 'from'}))
        filter_to = filters.NumberFilter(field_name=filter_accessor, lookup_expr='lte', widget=forms.NumberInput(attrs={'class': 'form-control input-filter', 'placeholder': 'to'}))
        column_filter = ColumnFilter({'number_from': filter_from, 'number_to': filter_to})
    elif isinstance(last_field, models.TextField):
        text_filter = filters.CharFilter(field_name=filter_accessor, lookup_expr='icontains', widget=forms.Textarea(attrs={'class': 'form-control input-filter'}))
        column_filter = ColumnFilter({'text_filter': text_filter})
    return column_filter


GENERATE_COLUMN_FILTER = generate_column_filter


